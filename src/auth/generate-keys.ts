import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

/**
 * Script pour g√©n√©rer les cl√©s RSA pour JWT
 * Ce script v√©rifie si les cl√©s existent d√©j√† et les g√©n√®re si n√©cessaire
 */

const privateKeyPath = path.join(__dirname, 'jwtRS256.key');
const publicKeyPath = path.join(__dirname, 'jwtRS256.key.pub');

// Fonction pour v√©rifier si un fichier existe
function fileExists(filePath: string): boolean {
  try {
    return fs.existsSync(filePath);
  } catch (err) {
    return false;
  }
}

// Fonction pour g√©n√©rer les cl√©s RSA
function generateRSAKeys(): void {
  console.log('üîë G√©n√©ration des cl√©s RSA pour JWT...');
  
  try {
    // G√©n√©rer la cl√© priv√©e
    execSync('openssl genrsa -out jwtRS256.key 2048', { cwd: __dirname });
    console.log('‚úÖ Cl√© priv√©e g√©n√©r√©e avec succ√®s');
    
    // G√©n√©rer la cl√© publique √† partir de la cl√© priv√©e
    execSync('openssl rsa -in jwtRS256.key -pubout -out jwtRS256.key.pub', { cwd: __dirname });
    console.log('‚úÖ Cl√© publique g√©n√©r√©e avec succ√®s');
    
    // D√©finir les permissions appropri√©es
    fs.chmodSync(privateKeyPath, 0o600); // Lecture/√©criture pour le propri√©taire uniquement
    fs.chmodSync(publicKeyPath, 0o644); // Lecture pour tous, √©criture pour le propri√©taire
    
    console.log('‚úÖ Permissions des cl√©s configur√©es');
    console.log('üîê Cl√©s RSA g√©n√©r√©es avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des cl√©s RSA:', error);
    process.exit(1);
  }
}

// V√©rifier si les cl√©s existent d√©j√†
if (fileExists(privateKeyPath) && fileExists(publicKeyPath)) {
  console.log('‚úÖ Les cl√©s RSA existent d√©j√†');
} else {
  console.log('‚ö†Ô∏è Les cl√©s RSA n\'existent pas ou sont incompl√®tes');
  generateRSAKeys();
}

export {};
