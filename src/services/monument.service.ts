import { Monument } from '../config/database';
import { MonumentInstance } from '../types/models';
import { WebSocketService } from '../websockets/websocket.service';
import { Op } from 'sequelize';

/**
 * Service pour la gestion des monuments
 */
export class MonumentService {
  /**
   * Cr√©e un nouveau monument
   * @param monumentData - Donn√©es du monument √† cr√©er
   * @returns Le monument cr√©√©
   */
  static async createMonument(monumentData: any): Promise<MonumentInstance> {
    console.log('üè∞ Cr√©ation d\'un nouveau monument:', monumentData.title);
    
    const monument = await Monument.create(monumentData);
    
    console.log('üíæ Monument cr√©√© avec succ√®s, ID:', monument.id);
    
    // Envoyer une notification WebSocket
    console.log('üì¢ Envoi de la notification aux clients connect√©s...');
    WebSocketService.notifyNewMonument(monument);
    
    return monument;
  }

  /**
   * R√©cup√®re tous les monuments
   * @returns Liste de tous les monuments
   */
  static async getAllMonuments(): Promise<MonumentInstance[]> {
    return await Monument.findAll();
  }

  /**
   * R√©cup√®re un monument par son ID
   * @param id - ID du monument √† r√©cup√©rer
   * @returns Le monument trouv√© ou null
   */
  static async getMonumentById(id: number): Promise<MonumentInstance | null> {
    return await Monument.findByPk(id);
  }

  /**
   * Met √† jour un monument
   * @param id - ID du monument √† mettre √† jour
   * @param monumentData - Nouvelles donn√©es du monument
   * @returns Le monument mis √† jour
   */
  static async updateMonument(id: number, monumentData: any): Promise<MonumentInstance | null> {
    const monument = await Monument.findByPk(id);
    
    if (!monument) {
      return null;
    }
    
    return await monument.update(monumentData);
  }

  /**
   * Supprime un monument
   * @param id - ID du monument √† supprimer
   * @returns true si le monument a √©t√© supprim√©, false sinon
   */
  static async deleteMonument(id: number): Promise<boolean> {
    const monument = await Monument.findByPk(id);
    
    if (!monument) {
      return false;
    }
    
    await monument.destroy();
    return true;
  }

  /**
   * Recherche des monuments par crit√®res
   * @param criteria - Crit√®res de recherche
   * @returns Liste des monuments correspondant aux crit√®res
   */
  static async searchMonuments(criteria: any): Promise<MonumentInstance[]> {
    const whereClause: any = {};
    
    if (criteria.title) {
      whereClause.title = { [Op.like]: `%${criteria.title}%` };
    }
    
    if (criteria.country) {
      whereClause.country = { [Op.like]: `%${criteria.country}%` };
    }
    
    if (criteria.city) {
      whereClause.city = { [Op.like]: `%${criteria.city}%` };
    }
    
    return await Monument.findAll({ where: whereClause });
  }
}
